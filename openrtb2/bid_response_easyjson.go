// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package openrtb2

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson326edDecodeGithubComApplifierGoOpenrtbOpenrtb2(in *jlexer.Lexer, out *BidResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "seatbid":
			if in.IsNull() {
				in.Skip()
				out.SeatBid = nil
			} else {
				in.Delim('[')
				if out.SeatBid == nil {
					if !in.IsDelim(']') {
						out.SeatBid = make([]SeatBid, 0, 1)
					} else {
						out.SeatBid = []SeatBid{}
					}
				} else {
					out.SeatBid = (out.SeatBid)[:0]
				}
				for !in.IsDelim(']') {
					var v1 SeatBid
					easyjson326edDecodeGithubComApplifierGoOpenrtbOpenrtb21(in, &v1)
					out.SeatBid = append(out.SeatBid, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "bidid":
			out.BidID = string(in.String())
		case "cur":
			out.Cur = string(in.String())
		case "customdata":
			out.CustomData = string(in.String())
		case "nbr":
			if in.IsNull() {
				in.Skip()
				out.NBR = nil
			} else {
				if out.NBR == nil {
					out.NBR = new(NoBidReasonCode)
				}
				*out.NBR = NoBidReasonCode(in.Int8())
			}
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson326edEncodeGithubComApplifierGoOpenrtbOpenrtb2(out *jwriter.Writer, in BidResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if len(in.SeatBid) != 0 {
		const prefix string = ",\"seatbid\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v2, v3 := range in.SeatBid {
				if v2 > 0 {
					out.RawByte(',')
				}
				easyjson326edEncodeGithubComApplifierGoOpenrtbOpenrtb21(out, v3)
			}
			out.RawByte(']')
		}
	}
	if in.BidID != "" {
		const prefix string = ",\"bidid\":"
		out.RawString(prefix)
		out.String(string(in.BidID))
	}
	if in.Cur != "" {
		const prefix string = ",\"cur\":"
		out.RawString(prefix)
		out.String(string(in.Cur))
	}
	if in.CustomData != "" {
		const prefix string = ",\"customdata\":"
		out.RawString(prefix)
		out.String(string(in.CustomData))
	}
	if in.NBR != nil {
		const prefix string = ",\"nbr\":"
		out.RawString(prefix)
		out.Int8(int8(*in.NBR))
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		out.RawString(prefix)
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BidResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson326edEncodeGithubComApplifierGoOpenrtbOpenrtb2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BidResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson326edEncodeGithubComApplifierGoOpenrtbOpenrtb2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BidResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson326edDecodeGithubComApplifierGoOpenrtbOpenrtb2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BidResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson326edDecodeGithubComApplifierGoOpenrtbOpenrtb2(l, v)
}
func easyjson326edDecodeGithubComApplifierGoOpenrtbOpenrtb21(in *jlexer.Lexer, out *SeatBid) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "bid":
			if in.IsNull() {
				in.Skip()
				out.Bid = nil
			} else {
				in.Delim('[')
				if out.Bid == nil {
					if !in.IsDelim(']') {
						out.Bid = make([]Bid, 0, 1)
					} else {
						out.Bid = []Bid{}
					}
				} else {
					out.Bid = (out.Bid)[:0]
				}
				for !in.IsDelim(']') {
					var v4 Bid
					easyjson326edDecodeGithubComApplifierGoOpenrtbOpenrtb22(in, &v4)
					out.Bid = append(out.Bid, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "seat":
			out.Seat = string(in.String())
		case "group":
			out.Group = int8(in.Int8())
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson326edEncodeGithubComApplifierGoOpenrtbOpenrtb21(out *jwriter.Writer, in SeatBid) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"bid\":"
		out.RawString(prefix[1:])
		if in.Bid == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Bid {
				if v5 > 0 {
					out.RawByte(',')
				}
				easyjson326edEncodeGithubComApplifierGoOpenrtbOpenrtb22(out, v6)
			}
			out.RawByte(']')
		}
	}
	if in.Seat != "" {
		const prefix string = ",\"seat\":"
		out.RawString(prefix)
		out.String(string(in.Seat))
	}
	if in.Group != 0 {
		const prefix string = ",\"group\":"
		out.RawString(prefix)
		out.Int8(int8(in.Group))
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		out.RawString(prefix)
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson326edDecodeGithubComApplifierGoOpenrtbOpenrtb22(in *jlexer.Lexer, out *Bid) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "impid":
			out.ImpID = string(in.String())
		case "price":
			out.Price = float64(in.Float64())
		case "nurl":
			out.NURL = string(in.String())
		case "burl":
			out.BURL = string(in.String())
		case "lurl":
			out.LURL = string(in.String())
		case "adm":
			out.AdM = string(in.String())
		case "adid":
			out.AdID = string(in.String())
		case "adomain":
			if in.IsNull() {
				in.Skip()
				out.ADomain = nil
			} else {
				in.Delim('[')
				if out.ADomain == nil {
					if !in.IsDelim(']') {
						out.ADomain = make([]string, 0, 4)
					} else {
						out.ADomain = []string{}
					}
				} else {
					out.ADomain = (out.ADomain)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.ADomain = append(out.ADomain, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "bundle":
			out.Bundle = string(in.String())
		case "iurl":
			out.IURL = string(in.String())
		case "cid":
			out.CID = string(in.String())
		case "crid":
			out.CrID = string(in.String())
		case "tactic":
			out.Tactic = string(in.String())
		case "cat":
			if in.IsNull() {
				in.Skip()
				out.Cat = nil
			} else {
				in.Delim('[')
				if out.Cat == nil {
					if !in.IsDelim(']') {
						out.Cat = make([]string, 0, 4)
					} else {
						out.Cat = []string{}
					}
				} else {
					out.Cat = (out.Cat)[:0]
				}
				for !in.IsDelim(']') {
					var v8 string
					v8 = string(in.String())
					out.Cat = append(out.Cat, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "attr":
			if in.IsNull() {
				in.Skip()
				out.Attr = nil
			} else {
				in.Delim('[')
				if out.Attr == nil {
					if !in.IsDelim(']') {
						out.Attr = make([]CreativeAttribute, 0, 64)
					} else {
						out.Attr = []CreativeAttribute{}
					}
				} else {
					out.Attr = (out.Attr)[:0]
				}
				for !in.IsDelim(']') {
					var v9 CreativeAttribute
					v9 = CreativeAttribute(in.Int8())
					out.Attr = append(out.Attr, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "api":
			out.API = APIFramework(in.Int8())
		case "protocol":
			out.Protocol = Protocol(in.Int8())
		case "qagmediarating":
			out.QAGMediaRating = IQGMediaRating(in.Int8())
		case "language":
			out.Language = string(in.String())
		case "dealid":
			out.DealID = string(in.String())
		case "w":
			out.W = int64(in.Int64())
		case "h":
			out.H = int64(in.Int64())
		case "wratio":
			out.WRatio = int64(in.Int64())
		case "hratio":
			out.HRatio = int64(in.Int64())
		case "exp":
			out.Exp = int64(in.Int64())
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson326edEncodeGithubComApplifierGoOpenrtbOpenrtb22(out *jwriter.Writer, in Bid) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"impid\":"
		out.RawString(prefix)
		out.String(string(in.ImpID))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.Float64(float64(in.Price))
	}
	if in.NURL != "" {
		const prefix string = ",\"nurl\":"
		out.RawString(prefix)
		out.String(string(in.NURL))
	}
	if in.BURL != "" {
		const prefix string = ",\"burl\":"
		out.RawString(prefix)
		out.String(string(in.BURL))
	}
	if in.LURL != "" {
		const prefix string = ",\"lurl\":"
		out.RawString(prefix)
		out.String(string(in.LURL))
	}
	if in.AdM != "" {
		const prefix string = ",\"adm\":"
		out.RawString(prefix)
		out.String(string(in.AdM))
	}
	if in.AdID != "" {
		const prefix string = ",\"adid\":"
		out.RawString(prefix)
		out.String(string(in.AdID))
	}
	if len(in.ADomain) != 0 {
		const prefix string = ",\"adomain\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v10, v11 := range in.ADomain {
				if v10 > 0 {
					out.RawByte(',')
				}
				out.String(string(v11))
			}
			out.RawByte(']')
		}
	}
	if in.Bundle != "" {
		const prefix string = ",\"bundle\":"
		out.RawString(prefix)
		out.String(string(in.Bundle))
	}
	if in.IURL != "" {
		const prefix string = ",\"iurl\":"
		out.RawString(prefix)
		out.String(string(in.IURL))
	}
	if in.CID != "" {
		const prefix string = ",\"cid\":"
		out.RawString(prefix)
		out.String(string(in.CID))
	}
	if in.CrID != "" {
		const prefix string = ",\"crid\":"
		out.RawString(prefix)
		out.String(string(in.CrID))
	}
	if in.Tactic != "" {
		const prefix string = ",\"tactic\":"
		out.RawString(prefix)
		out.String(string(in.Tactic))
	}
	if len(in.Cat) != 0 {
		const prefix string = ",\"cat\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v12, v13 := range in.Cat {
				if v12 > 0 {
					out.RawByte(',')
				}
				out.String(string(v13))
			}
			out.RawByte(']')
		}
	}
	if len(in.Attr) != 0 {
		const prefix string = ",\"attr\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v14, v15 := range in.Attr {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.Int8(int8(v15))
			}
			out.RawByte(']')
		}
	}
	if in.API != 0 {
		const prefix string = ",\"api\":"
		out.RawString(prefix)
		out.Int8(int8(in.API))
	}
	if in.Protocol != 0 {
		const prefix string = ",\"protocol\":"
		out.RawString(prefix)
		out.Int8(int8(in.Protocol))
	}
	if in.QAGMediaRating != 0 {
		const prefix string = ",\"qagmediarating\":"
		out.RawString(prefix)
		out.Int8(int8(in.QAGMediaRating))
	}
	if in.Language != "" {
		const prefix string = ",\"language\":"
		out.RawString(prefix)
		out.String(string(in.Language))
	}
	if in.DealID != "" {
		const prefix string = ",\"dealid\":"
		out.RawString(prefix)
		out.String(string(in.DealID))
	}
	if in.W != 0 {
		const prefix string = ",\"w\":"
		out.RawString(prefix)
		out.Int64(int64(in.W))
	}
	if in.H != 0 {
		const prefix string = ",\"h\":"
		out.RawString(prefix)
		out.Int64(int64(in.H))
	}
	if in.WRatio != 0 {
		const prefix string = ",\"wratio\":"
		out.RawString(prefix)
		out.Int64(int64(in.WRatio))
	}
	if in.HRatio != 0 {
		const prefix string = ",\"hratio\":"
		out.RawString(prefix)
		out.Int64(int64(in.HRatio))
	}
	if in.Exp != 0 {
		const prefix string = ",\"exp\":"
		out.RawString(prefix)
		out.Int64(int64(in.Exp))
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		out.RawString(prefix)
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}
