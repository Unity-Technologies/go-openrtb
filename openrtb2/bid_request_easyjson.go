// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package openrtb2

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson777f8b91DecodeGithubComApplifierGoOpenrtbOpenrtb2(in *jlexer.Lexer, out *BidRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "imp":
			if in.IsNull() {
				in.Skip()
				out.Imp = nil
			} else {
				in.Delim('[')
				if out.Imp == nil {
					if !in.IsDelim(']') {
						out.Imp = make([]Imp, 0, 1)
					} else {
						out.Imp = []Imp{}
					}
				} else {
					out.Imp = (out.Imp)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Imp
					easyjson777f8b91DecodeGithubComApplifierGoOpenrtbOpenrtb21(in, &v1)
					out.Imp = append(out.Imp, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "site":
			if in.IsNull() {
				in.Skip()
				out.Site = nil
			} else {
				if out.Site == nil {
					out.Site = new(Site)
				}
				easyjson777f8b91DecodeGithubComApplifierGoOpenrtbOpenrtb22(in, out.Site)
			}
		case "app":
			if in.IsNull() {
				in.Skip()
				out.App = nil
			} else {
				if out.App == nil {
					out.App = new(App)
				}
				easyjson777f8b91DecodeGithubComApplifierGoOpenrtbOpenrtb23(in, out.App)
			}
		case "device":
			if in.IsNull() {
				in.Skip()
				out.Device = nil
			} else {
				if out.Device == nil {
					out.Device = new(Device)
				}
				easyjson777f8b91DecodeGithubComApplifierGoOpenrtbOpenrtb24(in, out.Device)
			}
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(User)
				}
				easyjson777f8b91DecodeGithubComApplifierGoOpenrtbOpenrtb25(in, out.User)
			}
		case "test":
			out.Test = int8(in.Int8())
		case "at":
			out.AT = int64(in.Int64())
		case "tmax":
			out.TMax = int64(in.Int64())
		case "wseat":
			if in.IsNull() {
				in.Skip()
				out.WSeat = nil
			} else {
				in.Delim('[')
				if out.WSeat == nil {
					if !in.IsDelim(']') {
						out.WSeat = make([]string, 0, 4)
					} else {
						out.WSeat = []string{}
					}
				} else {
					out.WSeat = (out.WSeat)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.WSeat = append(out.WSeat, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "bseat":
			if in.IsNull() {
				in.Skip()
				out.BSeat = nil
			} else {
				in.Delim('[')
				if out.BSeat == nil {
					if !in.IsDelim(']') {
						out.BSeat = make([]string, 0, 4)
					} else {
						out.BSeat = []string{}
					}
				} else {
					out.BSeat = (out.BSeat)[:0]
				}
				for !in.IsDelim(']') {
					var v3 string
					v3 = string(in.String())
					out.BSeat = append(out.BSeat, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "allimps":
			out.AllImps = int8(in.Int8())
		case "cur":
			if in.IsNull() {
				in.Skip()
				out.Cur = nil
			} else {
				in.Delim('[')
				if out.Cur == nil {
					if !in.IsDelim(']') {
						out.Cur = make([]string, 0, 4)
					} else {
						out.Cur = []string{}
					}
				} else {
					out.Cur = (out.Cur)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.Cur = append(out.Cur, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "wlang":
			if in.IsNull() {
				in.Skip()
				out.WLang = nil
			} else {
				in.Delim('[')
				if out.WLang == nil {
					if !in.IsDelim(']') {
						out.WLang = make([]string, 0, 4)
					} else {
						out.WLang = []string{}
					}
				} else {
					out.WLang = (out.WLang)[:0]
				}
				for !in.IsDelim(']') {
					var v5 string
					v5 = string(in.String())
					out.WLang = append(out.WLang, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "bcat":
			if in.IsNull() {
				in.Skip()
				out.BCat = nil
			} else {
				in.Delim('[')
				if out.BCat == nil {
					if !in.IsDelim(']') {
						out.BCat = make([]string, 0, 4)
					} else {
						out.BCat = []string{}
					}
				} else {
					out.BCat = (out.BCat)[:0]
				}
				for !in.IsDelim(']') {
					var v6 string
					v6 = string(in.String())
					out.BCat = append(out.BCat, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "badv":
			if in.IsNull() {
				in.Skip()
				out.BAdv = nil
			} else {
				in.Delim('[')
				if out.BAdv == nil {
					if !in.IsDelim(']') {
						out.BAdv = make([]string, 0, 4)
					} else {
						out.BAdv = []string{}
					}
				} else {
					out.BAdv = (out.BAdv)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.BAdv = append(out.BAdv, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "bapp":
			if in.IsNull() {
				in.Skip()
				out.BApp = nil
			} else {
				in.Delim('[')
				if out.BApp == nil {
					if !in.IsDelim(']') {
						out.BApp = make([]string, 0, 4)
					} else {
						out.BApp = []string{}
					}
				} else {
					out.BApp = (out.BApp)[:0]
				}
				for !in.IsDelim(']') {
					var v8 string
					v8 = string(in.String())
					out.BApp = append(out.BApp, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "source":
			if in.IsNull() {
				in.Skip()
				out.Source = nil
			} else {
				if out.Source == nil {
					out.Source = new(Source)
				}
				easyjson777f8b91DecodeGithubComApplifierGoOpenrtbOpenrtb26(in, out.Source)
			}
		case "regs":
			if in.IsNull() {
				in.Skip()
				out.Regs = nil
			} else {
				if out.Regs == nil {
					out.Regs = new(Regs)
				}
				easyjson777f8b91DecodeGithubComApplifierGoOpenrtbOpenrtb27(in, out.Regs)
			}
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson777f8b91EncodeGithubComApplifierGoOpenrtbOpenrtb2(out *jwriter.Writer, in BidRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"imp\":"
		out.RawString(prefix)
		if in.Imp == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.Imp {
				if v9 > 0 {
					out.RawByte(',')
				}
				easyjson777f8b91EncodeGithubComApplifierGoOpenrtbOpenrtb21(out, v10)
			}
			out.RawByte(']')
		}
	}
	if in.Site != nil {
		const prefix string = ",\"site\":"
		out.RawString(prefix)
		easyjson777f8b91EncodeGithubComApplifierGoOpenrtbOpenrtb22(out, *in.Site)
	}
	if in.App != nil {
		const prefix string = ",\"app\":"
		out.RawString(prefix)
		easyjson777f8b91EncodeGithubComApplifierGoOpenrtbOpenrtb23(out, *in.App)
	}
	if in.Device != nil {
		const prefix string = ",\"device\":"
		out.RawString(prefix)
		easyjson777f8b91EncodeGithubComApplifierGoOpenrtbOpenrtb24(out, *in.Device)
	}
	if in.User != nil {
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		easyjson777f8b91EncodeGithubComApplifierGoOpenrtbOpenrtb25(out, *in.User)
	}
	if in.Test != 0 {
		const prefix string = ",\"test\":"
		out.RawString(prefix)
		out.Int8(int8(in.Test))
	}
	if in.AT != 0 {
		const prefix string = ",\"at\":"
		out.RawString(prefix)
		out.Int64(int64(in.AT))
	}
	if in.TMax != 0 {
		const prefix string = ",\"tmax\":"
		out.RawString(prefix)
		out.Int64(int64(in.TMax))
	}
	if len(in.WSeat) != 0 {
		const prefix string = ",\"wseat\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v11, v12 := range in.WSeat {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.String(string(v12))
			}
			out.RawByte(']')
		}
	}
	if len(in.BSeat) != 0 {
		const prefix string = ",\"bseat\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v13, v14 := range in.BSeat {
				if v13 > 0 {
					out.RawByte(',')
				}
				out.String(string(v14))
			}
			out.RawByte(']')
		}
	}
	if in.AllImps != 0 {
		const prefix string = ",\"allimps\":"
		out.RawString(prefix)
		out.Int8(int8(in.AllImps))
	}
	if len(in.Cur) != 0 {
		const prefix string = ",\"cur\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v15, v16 := range in.Cur {
				if v15 > 0 {
					out.RawByte(',')
				}
				out.String(string(v16))
			}
			out.RawByte(']')
		}
	}
	if len(in.WLang) != 0 {
		const prefix string = ",\"wlang\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v17, v18 := range in.WLang {
				if v17 > 0 {
					out.RawByte(',')
				}
				out.String(string(v18))
			}
			out.RawByte(']')
		}
	}
	if len(in.BCat) != 0 {
		const prefix string = ",\"bcat\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v19, v20 := range in.BCat {
				if v19 > 0 {
					out.RawByte(',')
				}
				out.String(string(v20))
			}
			out.RawByte(']')
		}
	}
	if len(in.BAdv) != 0 {
		const prefix string = ",\"badv\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v21, v22 := range in.BAdv {
				if v21 > 0 {
					out.RawByte(',')
				}
				out.String(string(v22))
			}
			out.RawByte(']')
		}
	}
	if len(in.BApp) != 0 {
		const prefix string = ",\"bapp\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v23, v24 := range in.BApp {
				if v23 > 0 {
					out.RawByte(',')
				}
				out.String(string(v24))
			}
			out.RawByte(']')
		}
	}
	if in.Source != nil {
		const prefix string = ",\"source\":"
		out.RawString(prefix)
		easyjson777f8b91EncodeGithubComApplifierGoOpenrtbOpenrtb26(out, *in.Source)
	}
	if in.Regs != nil {
		const prefix string = ",\"regs\":"
		out.RawString(prefix)
		easyjson777f8b91EncodeGithubComApplifierGoOpenrtbOpenrtb27(out, *in.Regs)
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		out.RawString(prefix)
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BidRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson777f8b91EncodeGithubComApplifierGoOpenrtbOpenrtb2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BidRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson777f8b91EncodeGithubComApplifierGoOpenrtbOpenrtb2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BidRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson777f8b91DecodeGithubComApplifierGoOpenrtbOpenrtb2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BidRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson777f8b91DecodeGithubComApplifierGoOpenrtbOpenrtb2(l, v)
}
func easyjson777f8b91DecodeGithubComApplifierGoOpenrtbOpenrtb27(in *jlexer.Lexer, out *Regs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "coppa":
			if in.IsNull() {
				in.Skip()
				out.COPPA = nil
			} else {
				if out.COPPA == nil {
					out.COPPA = new(int8)
				}
				*out.COPPA = int8(in.Int8())
			}
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson777f8b91EncodeGithubComApplifierGoOpenrtbOpenrtb27(out *jwriter.Writer, in Regs) {
	out.RawByte('{')
	first := true
	_ = first
	if in.COPPA != nil {
		const prefix string = ",\"coppa\":"
		first = false
		out.RawString(prefix[1:])
		out.Int8(int8(*in.COPPA))
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson777f8b91DecodeGithubComApplifierGoOpenrtbOpenrtb26(in *jlexer.Lexer, out *Source) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "fd":
			out.FD = int8(in.Int8())
		case "tid":
			out.TID = string(in.String())
		case "pchain":
			out.PChain = string(in.String())
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson777f8b91EncodeGithubComApplifierGoOpenrtbOpenrtb26(out *jwriter.Writer, in Source) {
	out.RawByte('{')
	first := true
	_ = first
	if in.FD != 0 {
		const prefix string = ",\"fd\":"
		first = false
		out.RawString(prefix[1:])
		out.Int8(int8(in.FD))
	}
	if in.TID != "" {
		const prefix string = ",\"tid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TID))
	}
	if in.PChain != "" {
		const prefix string = ",\"pchain\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PChain))
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson777f8b91DecodeGithubComApplifierGoOpenrtbOpenrtb25(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "buyeruid":
			out.BuyerUID = string(in.String())
		case "yob":
			out.Yob = int64(in.Int64())
		case "gender":
			out.Gender = string(in.String())
		case "keywords":
			out.Keywords = string(in.String())
		case "customdata":
			out.CustomData = string(in.String())
		case "geo":
			if in.IsNull() {
				in.Skip()
				out.Geo = nil
			} else {
				if out.Geo == nil {
					out.Geo = new(Geo)
				}
				easyjson777f8b91DecodeGithubComApplifierGoOpenrtbOpenrtb28(in, out.Geo)
			}
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]Data, 0, 1)
					} else {
						out.Data = []Data{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v25 Data
					easyjson777f8b91DecodeGithubComApplifierGoOpenrtbOpenrtb29(in, &v25)
					out.Data = append(out.Data, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson777f8b91EncodeGithubComApplifierGoOpenrtbOpenrtb25(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.BuyerUID != "" {
		const prefix string = ",\"buyeruid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BuyerUID))
	}
	if in.Yob != 0 {
		const prefix string = ",\"yob\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Yob))
	}
	if in.Gender != "" {
		const prefix string = ",\"gender\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Gender))
	}
	if in.Keywords != "" {
		const prefix string = ",\"keywords\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Keywords))
	}
	if in.CustomData != "" {
		const prefix string = ",\"customdata\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CustomData))
	}
	if in.Geo != nil {
		const prefix string = ",\"geo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson777f8b91EncodeGithubComApplifierGoOpenrtbOpenrtb28(out, *in.Geo)
	}
	if len(in.Data) != 0 {
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v26, v27 := range in.Data {
				if v26 > 0 {
					out.RawByte(',')
				}
				easyjson777f8b91EncodeGithubComApplifierGoOpenrtbOpenrtb29(out, v27)
			}
			out.RawByte(']')
		}
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson777f8b91DecodeGithubComApplifierGoOpenrtbOpenrtb29(in *jlexer.Lexer, out *Data) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "segment":
			if in.IsNull() {
				in.Skip()
				out.Segment = nil
			} else {
				in.Delim('[')
				if out.Segment == nil {
					if !in.IsDelim(']') {
						out.Segment = make([]Segment, 0, 1)
					} else {
						out.Segment = []Segment{}
					}
				} else {
					out.Segment = (out.Segment)[:0]
				}
				for !in.IsDelim(']') {
					var v28 Segment
					easyjson777f8b91DecodeGithubComApplifierGoOpenrtbOpenrtb210(in, &v28)
					out.Segment = append(out.Segment, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson777f8b91EncodeGithubComApplifierGoOpenrtbOpenrtb29(out *jwriter.Writer, in Data) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if len(in.Segment) != 0 {
		const prefix string = ",\"segment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v29, v30 := range in.Segment {
				if v29 > 0 {
					out.RawByte(',')
				}
				easyjson777f8b91EncodeGithubComApplifierGoOpenrtbOpenrtb210(out, v30)
			}
			out.RawByte(']')
		}
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson777f8b91DecodeGithubComApplifierGoOpenrtbOpenrtb210(in *jlexer.Lexer, out *Segment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "value":
			out.Value = string(in.String())
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson777f8b91EncodeGithubComApplifierGoOpenrtbOpenrtb210(out *jwriter.Writer, in Segment) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Value != "" {
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Value))
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson777f8b91DecodeGithubComApplifierGoOpenrtbOpenrtb28(in *jlexer.Lexer, out *Geo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "lat":
			out.Lat = float64(in.Float64())
		case "lon":
			out.Lon = float64(in.Float64())
		case "type":
			out.Type = LocationType(in.Int8())
		case "accuracy":
			out.Accuracy = int64(in.Int64())
		case "lastfix":
			out.LastFix = int64(in.Int64())
		case "ipservice":
			out.IPService = IPLocationService(in.Int8())
		case "country":
			out.Country = string(in.String())
		case "region":
			out.Region = string(in.String())
		case "regionfips104":
			out.RegionFIPS104 = string(in.String())
		case "metro":
			out.Metro = string(in.String())
		case "city":
			out.City = string(in.String())
		case "zip":
			out.ZIP = string(in.String())
		case "utcoffset":
			out.UTCOffset = int64(in.Int64())
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson777f8b91EncodeGithubComApplifierGoOpenrtbOpenrtb28(out *jwriter.Writer, in Geo) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Lat != 0 {
		const prefix string = ",\"lat\":"
		first = false
		out.RawString(prefix[1:])
		out.Float64(float64(in.Lat))
	}
	if in.Lon != 0 {
		const prefix string = ",\"lon\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Lon))
	}
	if in.Type != 0 {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int8(int8(in.Type))
	}
	if in.Accuracy != 0 {
		const prefix string = ",\"accuracy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Accuracy))
	}
	if in.LastFix != 0 {
		const prefix string = ",\"lastfix\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.LastFix))
	}
	if in.IPService != 0 {
		const prefix string = ",\"ipservice\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int8(int8(in.IPService))
	}
	if in.Country != "" {
		const prefix string = ",\"country\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Country))
	}
	if in.Region != "" {
		const prefix string = ",\"region\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Region))
	}
	if in.RegionFIPS104 != "" {
		const prefix string = ",\"regionfips104\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RegionFIPS104))
	}
	if in.Metro != "" {
		const prefix string = ",\"metro\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Metro))
	}
	if in.City != "" {
		const prefix string = ",\"city\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.City))
	}
	if in.ZIP != "" {
		const prefix string = ",\"zip\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ZIP))
	}
	if in.UTCOffset != 0 {
		const prefix string = ",\"utcoffset\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.UTCOffset))
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson777f8b91DecodeGithubComApplifierGoOpenrtbOpenrtb24(in *jlexer.Lexer, out *Device) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ua":
			out.UA = string(in.String())
		case "geo":
			if in.IsNull() {
				in.Skip()
				out.Geo = nil
			} else {
				if out.Geo == nil {
					out.Geo = new(Geo)
				}
				easyjson777f8b91DecodeGithubComApplifierGoOpenrtbOpenrtb28(in, out.Geo)
			}
		case "dnt":
			if in.IsNull() {
				in.Skip()
				out.DNT = nil
			} else {
				if out.DNT == nil {
					out.DNT = new(int8)
				}
				*out.DNT = int8(in.Int8())
			}
		case "lmt":
			if in.IsNull() {
				in.Skip()
				out.Lmt = nil
			} else {
				if out.Lmt == nil {
					out.Lmt = new(int8)
				}
				*out.Lmt = int8(in.Int8())
			}
		case "ip":
			out.IP = string(in.String())
		case "ipv6":
			out.IPv6 = string(in.String())
		case "devicetype":
			out.DeviceType = DeviceType(in.Int8())
		case "make":
			out.Make = string(in.String())
		case "model":
			out.Model = string(in.String())
		case "os":
			if in.IsNull() {
				in.Skip()
				out.OS = nil
			} else {
				if out.OS == nil {
					out.OS = new(string)
				}
				*out.OS = string(in.String())
			}
		case "osv":
			if in.IsNull() {
				in.Skip()
				out.OSV = nil
			} else {
				if out.OSV == nil {
					out.OSV = new(string)
				}
				*out.OSV = string(in.String())
			}
		case "hwv":
			out.HWV = string(in.String())
		case "h":
			out.H = int64(in.Int64())
		case "w":
			out.W = int64(in.Int64())
		case "ppi":
			out.PPI = int64(in.Int64())
		case "pxratio":
			out.PxRatio = float64(in.Float64())
		case "js":
			out.JS = int8(in.Int8())
		case "geofetch":
			out.GeoFetch = int8(in.Int8())
		case "flashver":
			out.FlashVer = string(in.String())
		case "language":
			out.Language = string(in.String())
		case "carrier":
			if in.IsNull() {
				in.Skip()
				out.Carrier = nil
			} else {
				if out.Carrier == nil {
					out.Carrier = new(string)
				}
				*out.Carrier = string(in.String())
			}
		case "mccmnc":
			out.MCCMNC = string(in.String())
		case "connectiontype":
			if in.IsNull() {
				in.Skip()
				out.ConnectionType = nil
			} else {
				if out.ConnectionType == nil {
					out.ConnectionType = new(ConnectionType)
				}
				*out.ConnectionType = ConnectionType(in.Int8())
			}
		case "ifa":
			out.IFA = string(in.String())
		case "didsha1":
			out.DIDSHA1 = string(in.String())
		case "didmd5":
			out.DIDMD5 = string(in.String())
		case "dpidsha1":
			out.DPIDSHA1 = string(in.String())
		case "dpidmd5":
			out.DPIDMD5 = string(in.String())
		case "macsha1":
			out.MACSHA1 = string(in.String())
		case "macmd5":
			out.MACMD5 = string(in.String())
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson777f8b91EncodeGithubComApplifierGoOpenrtbOpenrtb24(out *jwriter.Writer, in Device) {
	out.RawByte('{')
	first := true
	_ = first
	if in.UA != "" {
		const prefix string = ",\"ua\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.UA))
	}
	if in.Geo != nil {
		const prefix string = ",\"geo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson777f8b91EncodeGithubComApplifierGoOpenrtbOpenrtb28(out, *in.Geo)
	}
	if in.DNT != nil {
		const prefix string = ",\"dnt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int8(int8(*in.DNT))
	}
	if in.Lmt != nil {
		const prefix string = ",\"lmt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int8(int8(*in.Lmt))
	}
	if in.IP != "" {
		const prefix string = ",\"ip\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.IP))
	}
	if in.IPv6 != "" {
		const prefix string = ",\"ipv6\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.IPv6))
	}
	if in.DeviceType != 0 {
		const prefix string = ",\"devicetype\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int8(int8(in.DeviceType))
	}
	if in.Make != "" {
		const prefix string = ",\"make\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Make))
	}
	if in.Model != "" {
		const prefix string = ",\"model\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Model))
	}
	if in.OS != nil {
		const prefix string = ",\"os\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.OS))
	}
	if in.OSV != nil {
		const prefix string = ",\"osv\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.OSV))
	}
	if in.HWV != "" {
		const prefix string = ",\"hwv\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.HWV))
	}
	if in.H != 0 {
		const prefix string = ",\"h\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.H))
	}
	if in.W != 0 {
		const prefix string = ",\"w\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.W))
	}
	if in.PPI != 0 {
		const prefix string = ",\"ppi\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.PPI))
	}
	if in.PxRatio != 0 {
		const prefix string = ",\"pxratio\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.PxRatio))
	}
	if in.JS != 0 {
		const prefix string = ",\"js\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int8(int8(in.JS))
	}
	if in.GeoFetch != 0 {
		const prefix string = ",\"geofetch\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int8(int8(in.GeoFetch))
	}
	if in.FlashVer != "" {
		const prefix string = ",\"flashver\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FlashVer))
	}
	if in.Language != "" {
		const prefix string = ",\"language\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Language))
	}
	if in.Carrier != nil {
		const prefix string = ",\"carrier\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Carrier))
	}
	if in.MCCMNC != "" {
		const prefix string = ",\"mccmnc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MCCMNC))
	}
	if in.ConnectionType != nil {
		const prefix string = ",\"connectiontype\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int8(int8(*in.ConnectionType))
	}
	if in.IFA != "" {
		const prefix string = ",\"ifa\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.IFA))
	}
	if in.DIDSHA1 != "" {
		const prefix string = ",\"didsha1\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DIDSHA1))
	}
	if in.DIDMD5 != "" {
		const prefix string = ",\"didmd5\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DIDMD5))
	}
	if in.DPIDSHA1 != "" {
		const prefix string = ",\"dpidsha1\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DPIDSHA1))
	}
	if in.DPIDMD5 != "" {
		const prefix string = ",\"dpidmd5\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DPIDMD5))
	}
	if in.MACSHA1 != "" {
		const prefix string = ",\"macsha1\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MACSHA1))
	}
	if in.MACMD5 != "" {
		const prefix string = ",\"macmd5\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MACMD5))
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson777f8b91DecodeGithubComApplifierGoOpenrtbOpenrtb23(in *jlexer.Lexer, out *App) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "bundle":
			if in.IsNull() {
				in.Skip()
				out.Bundle = nil
			} else {
				if out.Bundle == nil {
					out.Bundle = new(string)
				}
				*out.Bundle = string(in.String())
			}
		case "domain":
			out.Domain = string(in.String())
		case "storeurl":
			out.StoreURL = string(in.String())
		case "cat":
			if in.IsNull() {
				in.Skip()
				out.Cat = nil
			} else {
				in.Delim('[')
				if out.Cat == nil {
					if !in.IsDelim(']') {
						out.Cat = make([]string, 0, 4)
					} else {
						out.Cat = []string{}
					}
				} else {
					out.Cat = (out.Cat)[:0]
				}
				for !in.IsDelim(']') {
					var v31 string
					v31 = string(in.String())
					out.Cat = append(out.Cat, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "sectioncat":
			if in.IsNull() {
				in.Skip()
				out.SectionCat = nil
			} else {
				in.Delim('[')
				if out.SectionCat == nil {
					if !in.IsDelim(']') {
						out.SectionCat = make([]string, 0, 4)
					} else {
						out.SectionCat = []string{}
					}
				} else {
					out.SectionCat = (out.SectionCat)[:0]
				}
				for !in.IsDelim(']') {
					var v32 string
					v32 = string(in.String())
					out.SectionCat = append(out.SectionCat, v32)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pagecat":
			if in.IsNull() {
				in.Skip()
				out.PageCat = nil
			} else {
				in.Delim('[')
				if out.PageCat == nil {
					if !in.IsDelim(']') {
						out.PageCat = make([]string, 0, 4)
					} else {
						out.PageCat = []string{}
					}
				} else {
					out.PageCat = (out.PageCat)[:0]
				}
				for !in.IsDelim(']') {
					var v33 string
					v33 = string(in.String())
					out.PageCat = append(out.PageCat, v33)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ver":
			if in.IsNull() {
				in.Skip()
				out.Ver = nil
			} else {
				if out.Ver == nil {
					out.Ver = new(string)
				}
				*out.Ver = string(in.String())
			}
		case "privacypolicy":
			out.PrivacyPolicy = int8(in.Int8())
		case "paid":
			out.Paid = int8(in.Int8())
		case "publisher":
			if in.IsNull() {
				in.Skip()
				out.Publisher = nil
			} else {
				if out.Publisher == nil {
					out.Publisher = new(Publisher)
				}
				easyjson777f8b91DecodeGithubComApplifierGoOpenrtbOpenrtb211(in, out.Publisher)
			}
		case "content":
			if in.IsNull() {
				in.Skip()
				out.Content = nil
			} else {
				if out.Content == nil {
					out.Content = new(Content)
				}
				easyjson777f8b91DecodeGithubComApplifierGoOpenrtbOpenrtb212(in, out.Content)
			}
		case "keywords":
			out.Keywords = string(in.String())
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson777f8b91EncodeGithubComApplifierGoOpenrtbOpenrtb23(out *jwriter.Writer, in App) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Bundle != nil {
		const prefix string = ",\"bundle\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Bundle))
	}
	if in.Domain != "" {
		const prefix string = ",\"domain\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Domain))
	}
	if in.StoreURL != "" {
		const prefix string = ",\"storeurl\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StoreURL))
	}
	if len(in.Cat) != 0 {
		const prefix string = ",\"cat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v34, v35 := range in.Cat {
				if v34 > 0 {
					out.RawByte(',')
				}
				out.String(string(v35))
			}
			out.RawByte(']')
		}
	}
	if len(in.SectionCat) != 0 {
		const prefix string = ",\"sectioncat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v36, v37 := range in.SectionCat {
				if v36 > 0 {
					out.RawByte(',')
				}
				out.String(string(v37))
			}
			out.RawByte(']')
		}
	}
	if len(in.PageCat) != 0 {
		const prefix string = ",\"pagecat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v38, v39 := range in.PageCat {
				if v38 > 0 {
					out.RawByte(',')
				}
				out.String(string(v39))
			}
			out.RawByte(']')
		}
	}
	if in.Ver != nil {
		const prefix string = ",\"ver\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Ver))
	}
	if in.PrivacyPolicy != 0 {
		const prefix string = ",\"privacypolicy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int8(int8(in.PrivacyPolicy))
	}
	if in.Paid != 0 {
		const prefix string = ",\"paid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int8(int8(in.Paid))
	}
	if in.Publisher != nil {
		const prefix string = ",\"publisher\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson777f8b91EncodeGithubComApplifierGoOpenrtbOpenrtb211(out, *in.Publisher)
	}
	if in.Content != nil {
		const prefix string = ",\"content\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson777f8b91EncodeGithubComApplifierGoOpenrtbOpenrtb212(out, *in.Content)
	}
	if in.Keywords != "" {
		const prefix string = ",\"keywords\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Keywords))
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson777f8b91DecodeGithubComApplifierGoOpenrtbOpenrtb212(in *jlexer.Lexer, out *Content) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "episode":
			out.Episode = int64(in.Int64())
		case "title":
			out.Title = string(in.String())
		case "series":
			out.Series = string(in.String())
		case "season":
			out.Season = string(in.String())
		case "artist":
			out.Artist = string(in.String())
		case "genre":
			out.Genre = string(in.String())
		case "album":
			out.Album = string(in.String())
		case "isrc":
			out.ISRC = string(in.String())
		case "producer":
			if in.IsNull() {
				in.Skip()
				out.Producer = nil
			} else {
				if out.Producer == nil {
					out.Producer = new(Producer)
				}
				easyjson777f8b91DecodeGithubComApplifierGoOpenrtbOpenrtb213(in, out.Producer)
			}
		case "url":
			out.URL = string(in.String())
		case "cat":
			if in.IsNull() {
				in.Skip()
				out.Cat = nil
			} else {
				in.Delim('[')
				if out.Cat == nil {
					if !in.IsDelim(']') {
						out.Cat = make([]string, 0, 4)
					} else {
						out.Cat = []string{}
					}
				} else {
					out.Cat = (out.Cat)[:0]
				}
				for !in.IsDelim(']') {
					var v40 string
					v40 = string(in.String())
					out.Cat = append(out.Cat, v40)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "prodq":
			if in.IsNull() {
				in.Skip()
				out.ProdQ = nil
			} else {
				if out.ProdQ == nil {
					out.ProdQ = new(ProductionQuality)
				}
				*out.ProdQ = ProductionQuality(in.Int8())
			}
		case "videoquality":
			if in.IsNull() {
				in.Skip()
				out.VideoQuality = nil
			} else {
				if out.VideoQuality == nil {
					out.VideoQuality = new(ProductionQuality)
				}
				*out.VideoQuality = ProductionQuality(in.Int8())
			}
		case "context":
			out.Context = ContentContext(in.Int8())
		case "contentrating":
			out.ContentRating = string(in.String())
		case "userrating":
			out.UserRating = string(in.String())
		case "qagmediarating":
			out.QAGMediaRating = IQGMediaRating(in.Int8())
		case "keywords":
			out.Keywords = string(in.String())
		case "livestream":
			out.LiveStream = int8(in.Int8())
		case "sourcerelationship":
			out.SourceRelationship = int8(in.Int8())
		case "len":
			out.Len = int64(in.Int64())
		case "language":
			out.Language = string(in.String())
		case "embeddable":
			out.Embeddable = int8(in.Int8())
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]Data, 0, 1)
					} else {
						out.Data = []Data{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v41 Data
					easyjson777f8b91DecodeGithubComApplifierGoOpenrtbOpenrtb29(in, &v41)
					out.Data = append(out.Data, v41)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson777f8b91EncodeGithubComApplifierGoOpenrtbOpenrtb212(out *jwriter.Writer, in Content) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.Episode != 0 {
		const prefix string = ",\"episode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Episode))
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	if in.Series != "" {
		const prefix string = ",\"series\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Series))
	}
	if in.Season != "" {
		const prefix string = ",\"season\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Season))
	}
	if in.Artist != "" {
		const prefix string = ",\"artist\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Artist))
	}
	if in.Genre != "" {
		const prefix string = ",\"genre\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Genre))
	}
	if in.Album != "" {
		const prefix string = ",\"album\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Album))
	}
	if in.ISRC != "" {
		const prefix string = ",\"isrc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ISRC))
	}
	if in.Producer != nil {
		const prefix string = ",\"producer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson777f8b91EncodeGithubComApplifierGoOpenrtbOpenrtb213(out, *in.Producer)
	}
	if in.URL != "" {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.URL))
	}
	if len(in.Cat) != 0 {
		const prefix string = ",\"cat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v42, v43 := range in.Cat {
				if v42 > 0 {
					out.RawByte(',')
				}
				out.String(string(v43))
			}
			out.RawByte(']')
		}
	}
	if in.ProdQ != nil {
		const prefix string = ",\"prodq\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int8(int8(*in.ProdQ))
	}
	if in.VideoQuality != nil {
		const prefix string = ",\"videoquality\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int8(int8(*in.VideoQuality))
	}
	if in.Context != 0 {
		const prefix string = ",\"context\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int8(int8(in.Context))
	}
	if in.ContentRating != "" {
		const prefix string = ",\"contentrating\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ContentRating))
	}
	if in.UserRating != "" {
		const prefix string = ",\"userrating\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserRating))
	}
	if in.QAGMediaRating != 0 {
		const prefix string = ",\"qagmediarating\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int8(int8(in.QAGMediaRating))
	}
	if in.Keywords != "" {
		const prefix string = ",\"keywords\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Keywords))
	}
	if in.LiveStream != 0 {
		const prefix string = ",\"livestream\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int8(int8(in.LiveStream))
	}
	if in.SourceRelationship != 0 {
		const prefix string = ",\"sourcerelationship\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int8(int8(in.SourceRelationship))
	}
	if in.Len != 0 {
		const prefix string = ",\"len\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Len))
	}
	if in.Language != "" {
		const prefix string = ",\"language\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Language))
	}
	if in.Embeddable != 0 {
		const prefix string = ",\"embeddable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int8(int8(in.Embeddable))
	}
	if len(in.Data) != 0 {
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v44, v45 := range in.Data {
				if v44 > 0 {
					out.RawByte(',')
				}
				easyjson777f8b91EncodeGithubComApplifierGoOpenrtbOpenrtb29(out, v45)
			}
			out.RawByte(']')
		}
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson777f8b91DecodeGithubComApplifierGoOpenrtbOpenrtb213(in *jlexer.Lexer, out *Producer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "cat":
			if in.IsNull() {
				in.Skip()
				out.Cat = nil
			} else {
				in.Delim('[')
				if out.Cat == nil {
					if !in.IsDelim(']') {
						out.Cat = make([]string, 0, 4)
					} else {
						out.Cat = []string{}
					}
				} else {
					out.Cat = (out.Cat)[:0]
				}
				for !in.IsDelim(']') {
					var v46 string
					v46 = string(in.String())
					out.Cat = append(out.Cat, v46)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "domain":
			out.Domain = string(in.String())
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson777f8b91EncodeGithubComApplifierGoOpenrtbOpenrtb213(out *jwriter.Writer, in Producer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if len(in.Cat) != 0 {
		const prefix string = ",\"cat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v47, v48 := range in.Cat {
				if v47 > 0 {
					out.RawByte(',')
				}
				out.String(string(v48))
			}
			out.RawByte(']')
		}
	}
	if in.Domain != "" {
		const prefix string = ",\"domain\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Domain))
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson777f8b91DecodeGithubComApplifierGoOpenrtbOpenrtb211(in *jlexer.Lexer, out *Publisher) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "cat":
			if in.IsNull() {
				in.Skip()
				out.Cat = nil
			} else {
				in.Delim('[')
				if out.Cat == nil {
					if !in.IsDelim(']') {
						out.Cat = make([]string, 0, 4)
					} else {
						out.Cat = []string{}
					}
				} else {
					out.Cat = (out.Cat)[:0]
				}
				for !in.IsDelim(']') {
					var v49 string
					v49 = string(in.String())
					out.Cat = append(out.Cat, v49)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "domain":
			out.Domain = string(in.String())
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson777f8b91EncodeGithubComApplifierGoOpenrtbOpenrtb211(out *jwriter.Writer, in Publisher) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if len(in.Cat) != 0 {
		const prefix string = ",\"cat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v50, v51 := range in.Cat {
				if v50 > 0 {
					out.RawByte(',')
				}
				out.String(string(v51))
			}
			out.RawByte(']')
		}
	}
	if in.Domain != "" {
		const prefix string = ",\"domain\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Domain))
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson777f8b91DecodeGithubComApplifierGoOpenrtbOpenrtb22(in *jlexer.Lexer, out *Site) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "domain":
			out.Domain = string(in.String())
		case "cat":
			if in.IsNull() {
				in.Skip()
				out.Cat = nil
			} else {
				in.Delim('[')
				if out.Cat == nil {
					if !in.IsDelim(']') {
						out.Cat = make([]string, 0, 4)
					} else {
						out.Cat = []string{}
					}
				} else {
					out.Cat = (out.Cat)[:0]
				}
				for !in.IsDelim(']') {
					var v52 string
					v52 = string(in.String())
					out.Cat = append(out.Cat, v52)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "sectioncat":
			if in.IsNull() {
				in.Skip()
				out.SectionCat = nil
			} else {
				in.Delim('[')
				if out.SectionCat == nil {
					if !in.IsDelim(']') {
						out.SectionCat = make([]string, 0, 4)
					} else {
						out.SectionCat = []string{}
					}
				} else {
					out.SectionCat = (out.SectionCat)[:0]
				}
				for !in.IsDelim(']') {
					var v53 string
					v53 = string(in.String())
					out.SectionCat = append(out.SectionCat, v53)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pagecat":
			if in.IsNull() {
				in.Skip()
				out.PageCat = nil
			} else {
				in.Delim('[')
				if out.PageCat == nil {
					if !in.IsDelim(']') {
						out.PageCat = make([]string, 0, 4)
					} else {
						out.PageCat = []string{}
					}
				} else {
					out.PageCat = (out.PageCat)[:0]
				}
				for !in.IsDelim(']') {
					var v54 string
					v54 = string(in.String())
					out.PageCat = append(out.PageCat, v54)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "page":
			out.Page = string(in.String())
		case "ref":
			out.Ref = string(in.String())
		case "search":
			out.Search = string(in.String())
		case "mobile":
			out.Mobile = int8(in.Int8())
		case "privacypolicy":
			out.PrivacyPolicy = int8(in.Int8())
		case "publisher":
			if in.IsNull() {
				in.Skip()
				out.Publisher = nil
			} else {
				if out.Publisher == nil {
					out.Publisher = new(Publisher)
				}
				easyjson777f8b91DecodeGithubComApplifierGoOpenrtbOpenrtb211(in, out.Publisher)
			}
		case "content":
			if in.IsNull() {
				in.Skip()
				out.Content = nil
			} else {
				if out.Content == nil {
					out.Content = new(Content)
				}
				easyjson777f8b91DecodeGithubComApplifierGoOpenrtbOpenrtb212(in, out.Content)
			}
		case "keywords":
			out.Keywords = string(in.String())
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson777f8b91EncodeGithubComApplifierGoOpenrtbOpenrtb22(out *jwriter.Writer, in Site) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Domain != "" {
		const prefix string = ",\"domain\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Domain))
	}
	if len(in.Cat) != 0 {
		const prefix string = ",\"cat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v55, v56 := range in.Cat {
				if v55 > 0 {
					out.RawByte(',')
				}
				out.String(string(v56))
			}
			out.RawByte(']')
		}
	}
	if len(in.SectionCat) != 0 {
		const prefix string = ",\"sectioncat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v57, v58 := range in.SectionCat {
				if v57 > 0 {
					out.RawByte(',')
				}
				out.String(string(v58))
			}
			out.RawByte(']')
		}
	}
	if len(in.PageCat) != 0 {
		const prefix string = ",\"pagecat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v59, v60 := range in.PageCat {
				if v59 > 0 {
					out.RawByte(',')
				}
				out.String(string(v60))
			}
			out.RawByte(']')
		}
	}
	if in.Page != "" {
		const prefix string = ",\"page\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Page))
	}
	if in.Ref != "" {
		const prefix string = ",\"ref\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Ref))
	}
	if in.Search != "" {
		const prefix string = ",\"search\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Search))
	}
	if in.Mobile != 0 {
		const prefix string = ",\"mobile\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int8(int8(in.Mobile))
	}
	if in.PrivacyPolicy != 0 {
		const prefix string = ",\"privacypolicy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int8(int8(in.PrivacyPolicy))
	}
	if in.Publisher != nil {
		const prefix string = ",\"publisher\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson777f8b91EncodeGithubComApplifierGoOpenrtbOpenrtb211(out, *in.Publisher)
	}
	if in.Content != nil {
		const prefix string = ",\"content\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson777f8b91EncodeGithubComApplifierGoOpenrtbOpenrtb212(out, *in.Content)
	}
	if in.Keywords != "" {
		const prefix string = ",\"keywords\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Keywords))
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson777f8b91DecodeGithubComApplifierGoOpenrtbOpenrtb21(in *jlexer.Lexer, out *Imp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "metric":
			if in.IsNull() {
				in.Skip()
				out.Metric = nil
			} else {
				in.Delim('[')
				if out.Metric == nil {
					if !in.IsDelim(']') {
						out.Metric = make([]Metric, 0, 1)
					} else {
						out.Metric = []Metric{}
					}
				} else {
					out.Metric = (out.Metric)[:0]
				}
				for !in.IsDelim(']') {
					var v61 Metric
					easyjson777f8b91DecodeGithubComApplifierGoOpenrtbOpenrtb214(in, &v61)
					out.Metric = append(out.Metric, v61)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "banner":
			if in.IsNull() {
				in.Skip()
				out.Banner = nil
			} else {
				if out.Banner == nil {
					out.Banner = new(Banner)
				}
				easyjson777f8b91DecodeGithubComApplifierGoOpenrtbOpenrtb215(in, out.Banner)
			}
		case "video":
			if in.IsNull() {
				in.Skip()
				out.Video = nil
			} else {
				if out.Video == nil {
					out.Video = new(Video)
				}
				easyjson777f8b91DecodeGithubComApplifierGoOpenrtbOpenrtb216(in, out.Video)
			}
		case "audio":
			if in.IsNull() {
				in.Skip()
				out.Audio = nil
			} else {
				if out.Audio == nil {
					out.Audio = new(Audio)
				}
				easyjson777f8b91DecodeGithubComApplifierGoOpenrtbOpenrtb217(in, out.Audio)
			}
		case "native":
			if in.IsNull() {
				in.Skip()
				out.Native = nil
			} else {
				if out.Native == nil {
					out.Native = new(Native)
				}
				easyjson777f8b91DecodeGithubComApplifierGoOpenrtbOpenrtb218(in, out.Native)
			}
		case "pmp":
			if in.IsNull() {
				in.Skip()
				out.PMP = nil
			} else {
				if out.PMP == nil {
					out.PMP = new(PMP)
				}
				easyjson777f8b91DecodeGithubComApplifierGoOpenrtbOpenrtb219(in, out.PMP)
			}
		case "displaymanager":
			out.DisplayManager = string(in.String())
		case "displaymanagerver":
			if in.IsNull() {
				in.Skip()
				out.DisplayManagerVer = nil
			} else {
				if out.DisplayManagerVer == nil {
					out.DisplayManagerVer = new(string)
				}
				*out.DisplayManagerVer = string(in.String())
			}
		case "instl":
			out.Instl = int8(in.Int8())
		case "tagid":
			if in.IsNull() {
				in.Skip()
				out.TagID = nil
			} else {
				if out.TagID == nil {
					out.TagID = new(string)
				}
				*out.TagID = string(in.String())
			}
		case "bidfloor":
			if in.IsNull() {
				in.Skip()
				out.BidFloor = nil
			} else {
				if out.BidFloor == nil {
					out.BidFloor = new(float64)
				}
				*out.BidFloor = float64(in.Float64())
			}
		case "bidfloorcur":
			out.BidFloorCur = string(in.String())
		case "clickbrowser":
			out.ClickBrowser = int8(in.Int8())
		case "secure":
			if in.IsNull() {
				in.Skip()
				out.Secure = nil
			} else {
				if out.Secure == nil {
					out.Secure = new(int8)
				}
				*out.Secure = int8(in.Int8())
			}
		case "iframebuster":
			if in.IsNull() {
				in.Skip()
				out.IframeBuster = nil
			} else {
				in.Delim('[')
				if out.IframeBuster == nil {
					if !in.IsDelim(']') {
						out.IframeBuster = make([]string, 0, 4)
					} else {
						out.IframeBuster = []string{}
					}
				} else {
					out.IframeBuster = (out.IframeBuster)[:0]
				}
				for !in.IsDelim(']') {
					var v62 string
					v62 = string(in.String())
					out.IframeBuster = append(out.IframeBuster, v62)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "exp":
			out.Exp = int64(in.Int64())
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson777f8b91EncodeGithubComApplifierGoOpenrtbOpenrtb21(out *jwriter.Writer, in Imp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if len(in.Metric) != 0 {
		const prefix string = ",\"metric\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v63, v64 := range in.Metric {
				if v63 > 0 {
					out.RawByte(',')
				}
				easyjson777f8b91EncodeGithubComApplifierGoOpenrtbOpenrtb214(out, v64)
			}
			out.RawByte(']')
		}
	}
	if in.Banner != nil {
		const prefix string = ",\"banner\":"
		out.RawString(prefix)
		easyjson777f8b91EncodeGithubComApplifierGoOpenrtbOpenrtb215(out, *in.Banner)
	}
	if in.Video != nil {
		const prefix string = ",\"video\":"
		out.RawString(prefix)
		easyjson777f8b91EncodeGithubComApplifierGoOpenrtbOpenrtb216(out, *in.Video)
	}
	if in.Audio != nil {
		const prefix string = ",\"audio\":"
		out.RawString(prefix)
		easyjson777f8b91EncodeGithubComApplifierGoOpenrtbOpenrtb217(out, *in.Audio)
	}
	if in.Native != nil {
		const prefix string = ",\"native\":"
		out.RawString(prefix)
		easyjson777f8b91EncodeGithubComApplifierGoOpenrtbOpenrtb218(out, *in.Native)
	}
	if in.PMP != nil {
		const prefix string = ",\"pmp\":"
		out.RawString(prefix)
		easyjson777f8b91EncodeGithubComApplifierGoOpenrtbOpenrtb219(out, *in.PMP)
	}
	if in.DisplayManager != "" {
		const prefix string = ",\"displaymanager\":"
		out.RawString(prefix)
		out.String(string(in.DisplayManager))
	}
	if in.DisplayManagerVer != nil {
		const prefix string = ",\"displaymanagerver\":"
		out.RawString(prefix)
		out.String(string(*in.DisplayManagerVer))
	}
	if in.Instl != 0 {
		const prefix string = ",\"instl\":"
		out.RawString(prefix)
		out.Int8(int8(in.Instl))
	}
	if in.TagID != nil {
		const prefix string = ",\"tagid\":"
		out.RawString(prefix)
		out.String(string(*in.TagID))
	}
	if in.BidFloor != nil {
		const prefix string = ",\"bidfloor\":"
		out.RawString(prefix)
		out.Float64(float64(*in.BidFloor))
	}
	if in.BidFloorCur != "" {
		const prefix string = ",\"bidfloorcur\":"
		out.RawString(prefix)
		out.String(string(in.BidFloorCur))
	}
	if in.ClickBrowser != 0 {
		const prefix string = ",\"clickbrowser\":"
		out.RawString(prefix)
		out.Int8(int8(in.ClickBrowser))
	}
	if in.Secure != nil {
		const prefix string = ",\"secure\":"
		out.RawString(prefix)
		out.Int8(int8(*in.Secure))
	}
	if len(in.IframeBuster) != 0 {
		const prefix string = ",\"iframebuster\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v65, v66 := range in.IframeBuster {
				if v65 > 0 {
					out.RawByte(',')
				}
				out.String(string(v66))
			}
			out.RawByte(']')
		}
	}
	if in.Exp != 0 {
		const prefix string = ",\"exp\":"
		out.RawString(prefix)
		out.Int64(int64(in.Exp))
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		out.RawString(prefix)
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson777f8b91DecodeGithubComApplifierGoOpenrtbOpenrtb219(in *jlexer.Lexer, out *PMP) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "private_auction":
			out.PrivateAuction = int8(in.Int8())
		case "deals":
			if in.IsNull() {
				in.Skip()
				out.Deals = nil
			} else {
				in.Delim('[')
				if out.Deals == nil {
					if !in.IsDelim(']') {
						out.Deals = make([]Deal, 0, 1)
					} else {
						out.Deals = []Deal{}
					}
				} else {
					out.Deals = (out.Deals)[:0]
				}
				for !in.IsDelim(']') {
					var v67 Deal
					easyjson777f8b91DecodeGithubComApplifierGoOpenrtbOpenrtb220(in, &v67)
					out.Deals = append(out.Deals, v67)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson777f8b91EncodeGithubComApplifierGoOpenrtbOpenrtb219(out *jwriter.Writer, in PMP) {
	out.RawByte('{')
	first := true
	_ = first
	if in.PrivateAuction != 0 {
		const prefix string = ",\"private_auction\":"
		first = false
		out.RawString(prefix[1:])
		out.Int8(int8(in.PrivateAuction))
	}
	if len(in.Deals) != 0 {
		const prefix string = ",\"deals\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v68, v69 := range in.Deals {
				if v68 > 0 {
					out.RawByte(',')
				}
				easyjson777f8b91EncodeGithubComApplifierGoOpenrtbOpenrtb220(out, v69)
			}
			out.RawByte(']')
		}
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson777f8b91DecodeGithubComApplifierGoOpenrtbOpenrtb220(in *jlexer.Lexer, out *Deal) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "bidfloor":
			out.BidFloor = float64(in.Float64())
		case "bidfloorcur":
			out.BidFloorCur = string(in.String())
		case "at":
			out.AT = int64(in.Int64())
		case "wseat":
			if in.IsNull() {
				in.Skip()
				out.WSeat = nil
			} else {
				in.Delim('[')
				if out.WSeat == nil {
					if !in.IsDelim(']') {
						out.WSeat = make([]string, 0, 4)
					} else {
						out.WSeat = []string{}
					}
				} else {
					out.WSeat = (out.WSeat)[:0]
				}
				for !in.IsDelim(']') {
					var v70 string
					v70 = string(in.String())
					out.WSeat = append(out.WSeat, v70)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "wadomain":
			if in.IsNull() {
				in.Skip()
				out.WADomain = nil
			} else {
				in.Delim('[')
				if out.WADomain == nil {
					if !in.IsDelim(']') {
						out.WADomain = make([]string, 0, 4)
					} else {
						out.WADomain = []string{}
					}
				} else {
					out.WADomain = (out.WADomain)[:0]
				}
				for !in.IsDelim(']') {
					var v71 string
					v71 = string(in.String())
					out.WADomain = append(out.WADomain, v71)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson777f8b91EncodeGithubComApplifierGoOpenrtbOpenrtb220(out *jwriter.Writer, in Deal) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.BidFloor != 0 {
		const prefix string = ",\"bidfloor\":"
		out.RawString(prefix)
		out.Float64(float64(in.BidFloor))
	}
	if in.BidFloorCur != "" {
		const prefix string = ",\"bidfloorcur\":"
		out.RawString(prefix)
		out.String(string(in.BidFloorCur))
	}
	if in.AT != 0 {
		const prefix string = ",\"at\":"
		out.RawString(prefix)
		out.Int64(int64(in.AT))
	}
	if len(in.WSeat) != 0 {
		const prefix string = ",\"wseat\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v72, v73 := range in.WSeat {
				if v72 > 0 {
					out.RawByte(',')
				}
				out.String(string(v73))
			}
			out.RawByte(']')
		}
	}
	if len(in.WADomain) != 0 {
		const prefix string = ",\"wadomain\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v74, v75 := range in.WADomain {
				if v74 > 0 {
					out.RawByte(',')
				}
				out.String(string(v75))
			}
			out.RawByte(']')
		}
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		out.RawString(prefix)
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson777f8b91DecodeGithubComApplifierGoOpenrtbOpenrtb218(in *jlexer.Lexer, out *Native) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "request":
			out.Request = string(in.String())
		case "ver":
			out.Ver = string(in.String())
		case "api":
			if in.IsNull() {
				in.Skip()
				out.API = nil
			} else {
				in.Delim('[')
				if out.API == nil {
					if !in.IsDelim(']') {
						out.API = make([]APIFramework, 0, 64)
					} else {
						out.API = []APIFramework{}
					}
				} else {
					out.API = (out.API)[:0]
				}
				for !in.IsDelim(']') {
					var v76 APIFramework
					v76 = APIFramework(in.Int8())
					out.API = append(out.API, v76)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "battr":
			if in.IsNull() {
				in.Skip()
				out.BAttr = nil
			} else {
				in.Delim('[')
				if out.BAttr == nil {
					if !in.IsDelim(']') {
						out.BAttr = make([]CreativeAttribute, 0, 64)
					} else {
						out.BAttr = []CreativeAttribute{}
					}
				} else {
					out.BAttr = (out.BAttr)[:0]
				}
				for !in.IsDelim(']') {
					var v77 CreativeAttribute
					v77 = CreativeAttribute(in.Int8())
					out.BAttr = append(out.BAttr, v77)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson777f8b91EncodeGithubComApplifierGoOpenrtbOpenrtb218(out *jwriter.Writer, in Native) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"request\":"
		out.RawString(prefix[1:])
		out.String(string(in.Request))
	}
	if in.Ver != "" {
		const prefix string = ",\"ver\":"
		out.RawString(prefix)
		out.String(string(in.Ver))
	}
	if len(in.API) != 0 {
		const prefix string = ",\"api\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v78, v79 := range in.API {
				if v78 > 0 {
					out.RawByte(',')
				}
				out.Int8(int8(v79))
			}
			out.RawByte(']')
		}
	}
	if len(in.BAttr) != 0 {
		const prefix string = ",\"battr\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v80, v81 := range in.BAttr {
				if v80 > 0 {
					out.RawByte(',')
				}
				out.Int8(int8(v81))
			}
			out.RawByte(']')
		}
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		out.RawString(prefix)
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson777f8b91DecodeGithubComApplifierGoOpenrtbOpenrtb217(in *jlexer.Lexer, out *Audio) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "mimes":
			if in.IsNull() {
				in.Skip()
				out.MIMEs = nil
			} else {
				in.Delim('[')
				if out.MIMEs == nil {
					if !in.IsDelim(']') {
						out.MIMEs = make([]string, 0, 4)
					} else {
						out.MIMEs = []string{}
					}
				} else {
					out.MIMEs = (out.MIMEs)[:0]
				}
				for !in.IsDelim(']') {
					var v82 string
					v82 = string(in.String())
					out.MIMEs = append(out.MIMEs, v82)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "minduration":
			out.MinDuration = int64(in.Int64())
		case "maxduration":
			out.MaxDuration = int64(in.Int64())
		case "protocols":
			if in.IsNull() {
				in.Skip()
				out.Protocols = nil
			} else {
				in.Delim('[')
				if out.Protocols == nil {
					if !in.IsDelim(']') {
						out.Protocols = make([]Protocol, 0, 64)
					} else {
						out.Protocols = []Protocol{}
					}
				} else {
					out.Protocols = (out.Protocols)[:0]
				}
				for !in.IsDelim(']') {
					var v83 Protocol
					v83 = Protocol(in.Int8())
					out.Protocols = append(out.Protocols, v83)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "startdelay":
			if in.IsNull() {
				in.Skip()
				out.StartDelay = nil
			} else {
				if out.StartDelay == nil {
					out.StartDelay = new(StartDelay)
				}
				*out.StartDelay = StartDelay(in.Int64())
			}
		case "sequence":
			out.Sequence = int64(in.Int64())
		case "battr":
			if in.IsNull() {
				in.Skip()
				out.BAttr = nil
			} else {
				in.Delim('[')
				if out.BAttr == nil {
					if !in.IsDelim(']') {
						out.BAttr = make([]CreativeAttribute, 0, 64)
					} else {
						out.BAttr = []CreativeAttribute{}
					}
				} else {
					out.BAttr = (out.BAttr)[:0]
				}
				for !in.IsDelim(']') {
					var v84 CreativeAttribute
					v84 = CreativeAttribute(in.Int8())
					out.BAttr = append(out.BAttr, v84)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "maxextended":
			out.MaxExtended = int64(in.Int64())
		case "minbitrate":
			out.MinBitrate = int64(in.Int64())
		case "maxbitrate":
			out.MaxBitrate = int64(in.Int64())
		case "delivery":
			if in.IsNull() {
				in.Skip()
				out.Delivery = nil
			} else {
				in.Delim('[')
				if out.Delivery == nil {
					if !in.IsDelim(']') {
						out.Delivery = make([]ContentDeliveryMethod, 0, 64)
					} else {
						out.Delivery = []ContentDeliveryMethod{}
					}
				} else {
					out.Delivery = (out.Delivery)[:0]
				}
				for !in.IsDelim(']') {
					var v85 ContentDeliveryMethod
					v85 = ContentDeliveryMethod(in.Int8())
					out.Delivery = append(out.Delivery, v85)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "companionad":
			if in.IsNull() {
				in.Skip()
				out.CompanionAd = nil
			} else {
				in.Delim('[')
				if out.CompanionAd == nil {
					if !in.IsDelim(']') {
						out.CompanionAd = make([]Banner, 0, 1)
					} else {
						out.CompanionAd = []Banner{}
					}
				} else {
					out.CompanionAd = (out.CompanionAd)[:0]
				}
				for !in.IsDelim(']') {
					var v86 Banner
					easyjson777f8b91DecodeGithubComApplifierGoOpenrtbOpenrtb215(in, &v86)
					out.CompanionAd = append(out.CompanionAd, v86)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "api":
			if in.IsNull() {
				in.Skip()
				out.API = nil
			} else {
				in.Delim('[')
				if out.API == nil {
					if !in.IsDelim(']') {
						out.API = make([]APIFramework, 0, 64)
					} else {
						out.API = []APIFramework{}
					}
				} else {
					out.API = (out.API)[:0]
				}
				for !in.IsDelim(']') {
					var v87 APIFramework
					v87 = APIFramework(in.Int8())
					out.API = append(out.API, v87)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "companiontype":
			if in.IsNull() {
				in.Skip()
				out.CompanionType = nil
			} else {
				in.Delim('[')
				if out.CompanionType == nil {
					if !in.IsDelim(']') {
						out.CompanionType = make([]CompanionType, 0, 64)
					} else {
						out.CompanionType = []CompanionType{}
					}
				} else {
					out.CompanionType = (out.CompanionType)[:0]
				}
				for !in.IsDelim(']') {
					var v88 CompanionType
					v88 = CompanionType(in.Int8())
					out.CompanionType = append(out.CompanionType, v88)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "maxseq":
			out.MaxSeq = int64(in.Int64())
		case "feed":
			out.Feed = FeedType(in.Int8())
		case "stitched":
			out.Stitched = int8(in.Int8())
		case "nvol":
			if in.IsNull() {
				in.Skip()
				out.NVol = nil
			} else {
				if out.NVol == nil {
					out.NVol = new(VolumeNormalizationMode)
				}
				*out.NVol = VolumeNormalizationMode(in.Int8())
			}
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson777f8b91EncodeGithubComApplifierGoOpenrtbOpenrtb217(out *jwriter.Writer, in Audio) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"mimes\":"
		out.RawString(prefix[1:])
		if in.MIMEs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v89, v90 := range in.MIMEs {
				if v89 > 0 {
					out.RawByte(',')
				}
				out.String(string(v90))
			}
			out.RawByte(']')
		}
	}
	if in.MinDuration != 0 {
		const prefix string = ",\"minduration\":"
		out.RawString(prefix)
		out.Int64(int64(in.MinDuration))
	}
	if in.MaxDuration != 0 {
		const prefix string = ",\"maxduration\":"
		out.RawString(prefix)
		out.Int64(int64(in.MaxDuration))
	}
	if len(in.Protocols) != 0 {
		const prefix string = ",\"protocols\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v91, v92 := range in.Protocols {
				if v91 > 0 {
					out.RawByte(',')
				}
				out.Int8(int8(v92))
			}
			out.RawByte(']')
		}
	}
	if in.StartDelay != nil {
		const prefix string = ",\"startdelay\":"
		out.RawString(prefix)
		out.Int64(int64(*in.StartDelay))
	}
	if in.Sequence != 0 {
		const prefix string = ",\"sequence\":"
		out.RawString(prefix)
		out.Int64(int64(in.Sequence))
	}
	if len(in.BAttr) != 0 {
		const prefix string = ",\"battr\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v93, v94 := range in.BAttr {
				if v93 > 0 {
					out.RawByte(',')
				}
				out.Int8(int8(v94))
			}
			out.RawByte(']')
		}
	}
	if in.MaxExtended != 0 {
		const prefix string = ",\"maxextended\":"
		out.RawString(prefix)
		out.Int64(int64(in.MaxExtended))
	}
	if in.MinBitrate != 0 {
		const prefix string = ",\"minbitrate\":"
		out.RawString(prefix)
		out.Int64(int64(in.MinBitrate))
	}
	if in.MaxBitrate != 0 {
		const prefix string = ",\"maxbitrate\":"
		out.RawString(prefix)
		out.Int64(int64(in.MaxBitrate))
	}
	if len(in.Delivery) != 0 {
		const prefix string = ",\"delivery\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v95, v96 := range in.Delivery {
				if v95 > 0 {
					out.RawByte(',')
				}
				out.Int8(int8(v96))
			}
			out.RawByte(']')
		}
	}
	if len(in.CompanionAd) != 0 {
		const prefix string = ",\"companionad\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v97, v98 := range in.CompanionAd {
				if v97 > 0 {
					out.RawByte(',')
				}
				easyjson777f8b91EncodeGithubComApplifierGoOpenrtbOpenrtb215(out, v98)
			}
			out.RawByte(']')
		}
	}
	if len(in.API) != 0 {
		const prefix string = ",\"api\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v99, v100 := range in.API {
				if v99 > 0 {
					out.RawByte(',')
				}
				out.Int8(int8(v100))
			}
			out.RawByte(']')
		}
	}
	if len(in.CompanionType) != 0 {
		const prefix string = ",\"companiontype\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v101, v102 := range in.CompanionType {
				if v101 > 0 {
					out.RawByte(',')
				}
				out.Int8(int8(v102))
			}
			out.RawByte(']')
		}
	}
	if in.MaxSeq != 0 {
		const prefix string = ",\"maxseq\":"
		out.RawString(prefix)
		out.Int64(int64(in.MaxSeq))
	}
	if in.Feed != 0 {
		const prefix string = ",\"feed\":"
		out.RawString(prefix)
		out.Int8(int8(in.Feed))
	}
	if in.Stitched != 0 {
		const prefix string = ",\"stitched\":"
		out.RawString(prefix)
		out.Int8(int8(in.Stitched))
	}
	if in.NVol != nil {
		const prefix string = ",\"nvol\":"
		out.RawString(prefix)
		out.Int8(int8(*in.NVol))
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		out.RawString(prefix)
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson777f8b91DecodeGithubComApplifierGoOpenrtbOpenrtb216(in *jlexer.Lexer, out *Video) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "mimes":
			if in.IsNull() {
				in.Skip()
				out.MIMEs = nil
			} else {
				in.Delim('[')
				if out.MIMEs == nil {
					if !in.IsDelim(']') {
						out.MIMEs = make([]string, 0, 4)
					} else {
						out.MIMEs = []string{}
					}
				} else {
					out.MIMEs = (out.MIMEs)[:0]
				}
				for !in.IsDelim(']') {
					var v103 string
					v103 = string(in.String())
					out.MIMEs = append(out.MIMEs, v103)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "minduration":
			out.MinDuration = int64(in.Int64())
		case "maxduration":
			out.MaxDuration = int64(in.Int64())
		case "protocols":
			if in.IsNull() {
				in.Skip()
				out.Protocols = nil
			} else {
				in.Delim('[')
				if out.Protocols == nil {
					if !in.IsDelim(']') {
						out.Protocols = make([]Protocol, 0, 64)
					} else {
						out.Protocols = []Protocol{}
					}
				} else {
					out.Protocols = (out.Protocols)[:0]
				}
				for !in.IsDelim(']') {
					var v104 Protocol
					v104 = Protocol(in.Int8())
					out.Protocols = append(out.Protocols, v104)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "protocol":
			out.Protocol = Protocol(in.Int8())
		case "w":
			out.W = int64(in.Int64())
		case "h":
			out.H = int64(in.Int64())
		case "startdelay":
			if in.IsNull() {
				in.Skip()
				out.StartDelay = nil
			} else {
				if out.StartDelay == nil {
					out.StartDelay = new(StartDelay)
				}
				*out.StartDelay = StartDelay(in.Int64())
			}
		case "placement":
			out.Placement = VideoPlacementType(in.Int8())
		case "linearity":
			out.Linearity = VideoLinearity(in.Int8())
		case "skip":
			if in.IsNull() {
				in.Skip()
				out.Skip = nil
			} else {
				if out.Skip == nil {
					out.Skip = new(int8)
				}
				*out.Skip = int8(in.Int8())
			}
		case "skipmin":
			out.SkipMin = int64(in.Int64())
		case "skipafter":
			out.SkipAfter = int64(in.Int64())
		case "sequence":
			out.Sequence = int8(in.Int8())
		case "battr":
			if in.IsNull() {
				in.Skip()
				out.BAttr = nil
			} else {
				in.Delim('[')
				if out.BAttr == nil {
					if !in.IsDelim(']') {
						out.BAttr = make([]CreativeAttribute, 0, 64)
					} else {
						out.BAttr = []CreativeAttribute{}
					}
				} else {
					out.BAttr = (out.BAttr)[:0]
				}
				for !in.IsDelim(']') {
					var v105 CreativeAttribute
					v105 = CreativeAttribute(in.Int8())
					out.BAttr = append(out.BAttr, v105)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "maxextended":
			out.MaxExtended = int64(in.Int64())
		case "minbitrate":
			out.MinBitRate = int64(in.Int64())
		case "maxbitrate":
			out.MaxBitRate = int64(in.Int64())
		case "boxingallowed":
			out.BoxingAllowed = int8(in.Int8())
		case "playbackmethod":
			if in.IsNull() {
				in.Skip()
				out.PlaybackMethod = nil
			} else {
				in.Delim('[')
				if out.PlaybackMethod == nil {
					if !in.IsDelim(']') {
						out.PlaybackMethod = make([]PlaybackMethod, 0, 64)
					} else {
						out.PlaybackMethod = []PlaybackMethod{}
					}
				} else {
					out.PlaybackMethod = (out.PlaybackMethod)[:0]
				}
				for !in.IsDelim(']') {
					var v106 PlaybackMethod
					v106 = PlaybackMethod(in.Int8())
					out.PlaybackMethod = append(out.PlaybackMethod, v106)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "playbackend":
			out.PlaybackEnd = PlaybackCessationMode(in.Int8())
		case "delivery":
			if in.IsNull() {
				in.Skip()
				out.Delivery = nil
			} else {
				in.Delim('[')
				if out.Delivery == nil {
					if !in.IsDelim(']') {
						out.Delivery = make([]ContentDeliveryMethod, 0, 64)
					} else {
						out.Delivery = []ContentDeliveryMethod{}
					}
				} else {
					out.Delivery = (out.Delivery)[:0]
				}
				for !in.IsDelim(']') {
					var v107 ContentDeliveryMethod
					v107 = ContentDeliveryMethod(in.Int8())
					out.Delivery = append(out.Delivery, v107)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pos":
			if in.IsNull() {
				in.Skip()
				out.Pos = nil
			} else {
				if out.Pos == nil {
					out.Pos = new(AdPosition)
				}
				*out.Pos = AdPosition(in.Int8())
			}
		case "companionad":
			if in.IsNull() {
				in.Skip()
				out.CompanionAd = nil
			} else {
				in.Delim('[')
				if out.CompanionAd == nil {
					if !in.IsDelim(']') {
						out.CompanionAd = make([]Banner, 0, 1)
					} else {
						out.CompanionAd = []Banner{}
					}
				} else {
					out.CompanionAd = (out.CompanionAd)[:0]
				}
				for !in.IsDelim(']') {
					var v108 Banner
					easyjson777f8b91DecodeGithubComApplifierGoOpenrtbOpenrtb215(in, &v108)
					out.CompanionAd = append(out.CompanionAd, v108)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "api":
			if in.IsNull() {
				in.Skip()
				out.API = nil
			} else {
				in.Delim('[')
				if out.API == nil {
					if !in.IsDelim(']') {
						out.API = make([]APIFramework, 0, 64)
					} else {
						out.API = []APIFramework{}
					}
				} else {
					out.API = (out.API)[:0]
				}
				for !in.IsDelim(']') {
					var v109 APIFramework
					v109 = APIFramework(in.Int8())
					out.API = append(out.API, v109)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "companiontype":
			if in.IsNull() {
				in.Skip()
				out.CompanionType = nil
			} else {
				in.Delim('[')
				if out.CompanionType == nil {
					if !in.IsDelim(']') {
						out.CompanionType = make([]CompanionType, 0, 64)
					} else {
						out.CompanionType = []CompanionType{}
					}
				} else {
					out.CompanionType = (out.CompanionType)[:0]
				}
				for !in.IsDelim(']') {
					var v110 CompanionType
					v110 = CompanionType(in.Int8())
					out.CompanionType = append(out.CompanionType, v110)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson777f8b91EncodeGithubComApplifierGoOpenrtbOpenrtb216(out *jwriter.Writer, in Video) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"mimes\":"
		out.RawString(prefix[1:])
		if in.MIMEs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v111, v112 := range in.MIMEs {
				if v111 > 0 {
					out.RawByte(',')
				}
				out.String(string(v112))
			}
			out.RawByte(']')
		}
	}
	if in.MinDuration != 0 {
		const prefix string = ",\"minduration\":"
		out.RawString(prefix)
		out.Int64(int64(in.MinDuration))
	}
	if in.MaxDuration != 0 {
		const prefix string = ",\"maxduration\":"
		out.RawString(prefix)
		out.Int64(int64(in.MaxDuration))
	}
	if len(in.Protocols) != 0 {
		const prefix string = ",\"protocols\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v113, v114 := range in.Protocols {
				if v113 > 0 {
					out.RawByte(',')
				}
				out.Int8(int8(v114))
			}
			out.RawByte(']')
		}
	}
	if in.Protocol != 0 {
		const prefix string = ",\"protocol\":"
		out.RawString(prefix)
		out.Int8(int8(in.Protocol))
	}
	if in.W != 0 {
		const prefix string = ",\"w\":"
		out.RawString(prefix)
		out.Int64(int64(in.W))
	}
	if in.H != 0 {
		const prefix string = ",\"h\":"
		out.RawString(prefix)
		out.Int64(int64(in.H))
	}
	if in.StartDelay != nil {
		const prefix string = ",\"startdelay\":"
		out.RawString(prefix)
		out.Int64(int64(*in.StartDelay))
	}
	if in.Placement != 0 {
		const prefix string = ",\"placement\":"
		out.RawString(prefix)
		out.Int8(int8(in.Placement))
	}
	if in.Linearity != 0 {
		const prefix string = ",\"linearity\":"
		out.RawString(prefix)
		out.Int8(int8(in.Linearity))
	}
	if in.Skip != nil {
		const prefix string = ",\"skip\":"
		out.RawString(prefix)
		out.Int8(int8(*in.Skip))
	}
	if in.SkipMin != 0 {
		const prefix string = ",\"skipmin\":"
		out.RawString(prefix)
		out.Int64(int64(in.SkipMin))
	}
	if in.SkipAfter != 0 {
		const prefix string = ",\"skipafter\":"
		out.RawString(prefix)
		out.Int64(int64(in.SkipAfter))
	}
	if in.Sequence != 0 {
		const prefix string = ",\"sequence\":"
		out.RawString(prefix)
		out.Int8(int8(in.Sequence))
	}
	if len(in.BAttr) != 0 {
		const prefix string = ",\"battr\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v115, v116 := range in.BAttr {
				if v115 > 0 {
					out.RawByte(',')
				}
				out.Int8(int8(v116))
			}
			out.RawByte(']')
		}
	}
	if in.MaxExtended != 0 {
		const prefix string = ",\"maxextended\":"
		out.RawString(prefix)
		out.Int64(int64(in.MaxExtended))
	}
	if in.MinBitRate != 0 {
		const prefix string = ",\"minbitrate\":"
		out.RawString(prefix)
		out.Int64(int64(in.MinBitRate))
	}
	if in.MaxBitRate != 0 {
		const prefix string = ",\"maxbitrate\":"
		out.RawString(prefix)
		out.Int64(int64(in.MaxBitRate))
	}
	if in.BoxingAllowed != 0 {
		const prefix string = ",\"boxingallowed\":"
		out.RawString(prefix)
		out.Int8(int8(in.BoxingAllowed))
	}
	if len(in.PlaybackMethod) != 0 {
		const prefix string = ",\"playbackmethod\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v117, v118 := range in.PlaybackMethod {
				if v117 > 0 {
					out.RawByte(',')
				}
				out.Int8(int8(v118))
			}
			out.RawByte(']')
		}
	}
	if in.PlaybackEnd != 0 {
		const prefix string = ",\"playbackend\":"
		out.RawString(prefix)
		out.Int8(int8(in.PlaybackEnd))
	}
	if len(in.Delivery) != 0 {
		const prefix string = ",\"delivery\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v119, v120 := range in.Delivery {
				if v119 > 0 {
					out.RawByte(',')
				}
				out.Int8(int8(v120))
			}
			out.RawByte(']')
		}
	}
	if in.Pos != nil {
		const prefix string = ",\"pos\":"
		out.RawString(prefix)
		out.Int8(int8(*in.Pos))
	}
	if len(in.CompanionAd) != 0 {
		const prefix string = ",\"companionad\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v121, v122 := range in.CompanionAd {
				if v121 > 0 {
					out.RawByte(',')
				}
				easyjson777f8b91EncodeGithubComApplifierGoOpenrtbOpenrtb215(out, v122)
			}
			out.RawByte(']')
		}
	}
	if len(in.API) != 0 {
		const prefix string = ",\"api\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v123, v124 := range in.API {
				if v123 > 0 {
					out.RawByte(',')
				}
				out.Int8(int8(v124))
			}
			out.RawByte(']')
		}
	}
	if len(in.CompanionType) != 0 {
		const prefix string = ",\"companiontype\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v125, v126 := range in.CompanionType {
				if v125 > 0 {
					out.RawByte(',')
				}
				out.Int8(int8(v126))
			}
			out.RawByte(']')
		}
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		out.RawString(prefix)
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson777f8b91DecodeGithubComApplifierGoOpenrtbOpenrtb215(in *jlexer.Lexer, out *Banner) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "format":
			if in.IsNull() {
				in.Skip()
				out.Format = nil
			} else {
				in.Delim('[')
				if out.Format == nil {
					if !in.IsDelim(']') {
						out.Format = make([]Format, 0, 1)
					} else {
						out.Format = []Format{}
					}
				} else {
					out.Format = (out.Format)[:0]
				}
				for !in.IsDelim(']') {
					var v127 Format
					easyjson777f8b91DecodeGithubComApplifierGoOpenrtbOpenrtb221(in, &v127)
					out.Format = append(out.Format, v127)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "w":
			if in.IsNull() {
				in.Skip()
				out.W = nil
			} else {
				if out.W == nil {
					out.W = new(int64)
				}
				*out.W = int64(in.Int64())
			}
		case "h":
			if in.IsNull() {
				in.Skip()
				out.H = nil
			} else {
				if out.H == nil {
					out.H = new(int64)
				}
				*out.H = int64(in.Int64())
			}
		case "wmax":
			out.WMax = int64(in.Int64())
		case "hmax":
			out.HMax = int64(in.Int64())
		case "wmin":
			out.WMin = int64(in.Int64())
		case "hmin":
			out.HMin = int64(in.Int64())
		case "btype":
			if in.IsNull() {
				in.Skip()
				out.BType = nil
			} else {
				in.Delim('[')
				if out.BType == nil {
					if !in.IsDelim(']') {
						out.BType = make([]BannerAdType, 0, 64)
					} else {
						out.BType = []BannerAdType{}
					}
				} else {
					out.BType = (out.BType)[:0]
				}
				for !in.IsDelim(']') {
					var v128 BannerAdType
					v128 = BannerAdType(in.Int8())
					out.BType = append(out.BType, v128)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "battr":
			if in.IsNull() {
				in.Skip()
				out.BAttr = nil
			} else {
				in.Delim('[')
				if out.BAttr == nil {
					if !in.IsDelim(']') {
						out.BAttr = make([]CreativeAttribute, 0, 64)
					} else {
						out.BAttr = []CreativeAttribute{}
					}
				} else {
					out.BAttr = (out.BAttr)[:0]
				}
				for !in.IsDelim(']') {
					var v129 CreativeAttribute
					v129 = CreativeAttribute(in.Int8())
					out.BAttr = append(out.BAttr, v129)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pos":
			if in.IsNull() {
				in.Skip()
				out.Pos = nil
			} else {
				if out.Pos == nil {
					out.Pos = new(AdPosition)
				}
				*out.Pos = AdPosition(in.Int8())
			}
		case "mimes":
			if in.IsNull() {
				in.Skip()
				out.MIMEs = nil
			} else {
				in.Delim('[')
				if out.MIMEs == nil {
					if !in.IsDelim(']') {
						out.MIMEs = make([]string, 0, 4)
					} else {
						out.MIMEs = []string{}
					}
				} else {
					out.MIMEs = (out.MIMEs)[:0]
				}
				for !in.IsDelim(']') {
					var v130 string
					v130 = string(in.String())
					out.MIMEs = append(out.MIMEs, v130)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "topframe":
			out.TopFrame = int8(in.Int8())
		case "expdir":
			if in.IsNull() {
				in.Skip()
				out.ExpDir = nil
			} else {
				in.Delim('[')
				if out.ExpDir == nil {
					if !in.IsDelim(']') {
						out.ExpDir = make([]ExpandableDirection, 0, 64)
					} else {
						out.ExpDir = []ExpandableDirection{}
					}
				} else {
					out.ExpDir = (out.ExpDir)[:0]
				}
				for !in.IsDelim(']') {
					var v131 ExpandableDirection
					v131 = ExpandableDirection(in.Int8())
					out.ExpDir = append(out.ExpDir, v131)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "api":
			if in.IsNull() {
				in.Skip()
				out.API = nil
			} else {
				in.Delim('[')
				if out.API == nil {
					if !in.IsDelim(']') {
						out.API = make([]APIFramework, 0, 64)
					} else {
						out.API = []APIFramework{}
					}
				} else {
					out.API = (out.API)[:0]
				}
				for !in.IsDelim(']') {
					var v132 APIFramework
					v132 = APIFramework(in.Int8())
					out.API = append(out.API, v132)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "id":
			out.ID = string(in.String())
		case "vcm":
			out.VCm = int8(in.Int8())
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson777f8b91EncodeGithubComApplifierGoOpenrtbOpenrtb215(out *jwriter.Writer, in Banner) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Format) != 0 {
		const prefix string = ",\"format\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v133, v134 := range in.Format {
				if v133 > 0 {
					out.RawByte(',')
				}
				easyjson777f8b91EncodeGithubComApplifierGoOpenrtbOpenrtb221(out, v134)
			}
			out.RawByte(']')
		}
	}
	if in.W != nil {
		const prefix string = ",\"w\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.W))
	}
	if in.H != nil {
		const prefix string = ",\"h\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.H))
	}
	if in.WMax != 0 {
		const prefix string = ",\"wmax\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.WMax))
	}
	if in.HMax != 0 {
		const prefix string = ",\"hmax\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.HMax))
	}
	if in.WMin != 0 {
		const prefix string = ",\"wmin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.WMin))
	}
	if in.HMin != 0 {
		const prefix string = ",\"hmin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.HMin))
	}
	if len(in.BType) != 0 {
		const prefix string = ",\"btype\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v135, v136 := range in.BType {
				if v135 > 0 {
					out.RawByte(',')
				}
				out.Int8(int8(v136))
			}
			out.RawByte(']')
		}
	}
	if len(in.BAttr) != 0 {
		const prefix string = ",\"battr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v137, v138 := range in.BAttr {
				if v137 > 0 {
					out.RawByte(',')
				}
				out.Int8(int8(v138))
			}
			out.RawByte(']')
		}
	}
	if in.Pos != nil {
		const prefix string = ",\"pos\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int8(int8(*in.Pos))
	}
	if len(in.MIMEs) != 0 {
		const prefix string = ",\"mimes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v139, v140 := range in.MIMEs {
				if v139 > 0 {
					out.RawByte(',')
				}
				out.String(string(v140))
			}
			out.RawByte(']')
		}
	}
	if in.TopFrame != 0 {
		const prefix string = ",\"topframe\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int8(int8(in.TopFrame))
	}
	if len(in.ExpDir) != 0 {
		const prefix string = ",\"expdir\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v141, v142 := range in.ExpDir {
				if v141 > 0 {
					out.RawByte(',')
				}
				out.Int8(int8(v142))
			}
			out.RawByte(']')
		}
	}
	if len(in.API) != 0 {
		const prefix string = ",\"api\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v143, v144 := range in.API {
				if v143 > 0 {
					out.RawByte(',')
				}
				out.Int8(int8(v144))
			}
			out.RawByte(']')
		}
	}
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.VCm != 0 {
		const prefix string = ",\"vcm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int8(int8(in.VCm))
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson777f8b91DecodeGithubComApplifierGoOpenrtbOpenrtb221(in *jlexer.Lexer, out *Format) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "w":
			out.W = int64(in.Int64())
		case "h":
			out.H = int64(in.Int64())
		case "wratio":
			out.WRatio = int64(in.Int64())
		case "hratio":
			out.HRatio = int64(in.Int64())
		case "wmin":
			out.WMin = int64(in.Int64())
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson777f8b91EncodeGithubComApplifierGoOpenrtbOpenrtb221(out *jwriter.Writer, in Format) {
	out.RawByte('{')
	first := true
	_ = first
	if in.W != 0 {
		const prefix string = ",\"w\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.W))
	}
	if in.H != 0 {
		const prefix string = ",\"h\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.H))
	}
	if in.WRatio != 0 {
		const prefix string = ",\"wratio\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.WRatio))
	}
	if in.HRatio != 0 {
		const prefix string = ",\"hratio\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.HRatio))
	}
	if in.WMin != 0 {
		const prefix string = ",\"wmin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.WMin))
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson777f8b91DecodeGithubComApplifierGoOpenrtbOpenrtb214(in *jlexer.Lexer, out *Metric) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "value":
			out.Value = float64(in.Float64())
		case "vendor":
			out.Vendor = string(in.String())
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson777f8b91EncodeGithubComApplifierGoOpenrtbOpenrtb214(out *jwriter.Writer, in Metric) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	if in.Value != 0 {
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.Float64(float64(in.Value))
	}
	if in.Vendor != "" {
		const prefix string = ",\"vendor\":"
		out.RawString(prefix)
		out.String(string(in.Vendor))
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		out.RawString(prefix)
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}
